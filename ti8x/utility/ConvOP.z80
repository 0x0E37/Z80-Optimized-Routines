;Converts a TI float in the way ConvOP1 does it.
;Offers a wider range, and reading floats from arbitrary locations, not just OP1.

ConvOP1:
;Output: HL is the 16-bit result.
    ld de,OP1
ConvFloat:
;Input: DE points to the float.
;Output: HL is the 16-bit result.
;Errors: DataType if the float is negative or complex
;        Domain if the integer exceeds 16 bits.
;Timings:  Assume no errors were called.
;  Input is on:
;  (0,1)         => 57cc                        Average=59
;  0 or [1,10)   => 118cc or 127cc                     =124.5
;  [10,100)      => 174cc or 175cc                     =176.5
;  [100,1000)    => 307cc, 308cc, 316cc, or 317cc.     =312
;  [1000,10000)  => 374cc to 376cc                     =375
;  [10000,65536) => 512cc to 514cc, or 521cc to 523cc  =517.5
;Average case:  494.577178955078125cc
;vs 959.656982421875cc
;86 bytes

    ld a,(de)
    or a
    jr nz,ErrDataType
    inc de
    ld h,a
    ld l,a
    ld a,(de)
    inc de
    sub 80h
    ret c
    jr z,final
    cp 5
    jp c,enterloop
ErrDomain:
;Throws a domain error.
    bcall(_ErrDomain)
ErrDataType:
;Throws a data type error.
    bcall(_ErrDataType)
loop:
    ld a,b
    ld b,h
    ld c,l
    add hl,hl
    add hl,bc
    add hl,hl
    add hl,hl
    add hl,hl
    add hl,bc
    add hl,hl
    add hl,hl
enterloop:
    ld b,a
    ex de,hl
    ld a,(hl) \ and $F0 \ rra \ ld c,a \ rra \ rra \ sub c \ add a,(hl)
    inc hl
    ex de,hl
    add a,l
    ld l,a
    jr nc,$+3
    inc h
    dec b
    ret z
    djnz loop
    ld b,h
    ld c,l
    xor a
;check overflow in this mul by 10!
    add hl,hl \ adc a,a
    add hl,hl \ adc a,a
    add hl,bc \ adc a,0
    add hl,hl \ adc a,a
    jr nz,ErrDomain
final:
    ld a,(de)
    rrca
    rrca
    rrca
    rrca
    and 15
    add a,l
    ld l,a
    ret nc
    inc h
    ret nz
    jr ErrDomain
